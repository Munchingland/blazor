@page "/reporter"

@inject NavigationManager _navigationManager;
@inject IWindSurferService _surferService;
@inject ITournamentService _tournamentService;
@inject IMatchService _matchService;
@using Pin.LiveSports.Blazor.Components;
@using Pin.LiveSports.Core;

@if (!isEditingTournaments && !isReporting)
{
    <button class="btn btn-outline-primary" @onclick="()=>RequestTournamentChanged()">Voeg een nieuwe toernooi toe</button>
    @if(tournaments != null)
    {
        <TournamentList isReporter=true Tournaments="tournaments" OpenTournament="EditTournament"  StartReport="StartReport"/>
    }
}

@if (isEditingTournaments)
{
    @if (!isNewSurferRequested)
    {
            <button class="btn btn-outline-primary" @onclick="()=>RequestNewSurferForm()">Voeg nieuwe windsurfer toe</button>
            <button class="btn btn-outline-secondary" @onclick="()=>RequestTournamentChanged()">annuleer nieuw toernooi</button>
        <EditForm Model="tournamentNewOrEdit" OnValidSubmit="AddNewTournament">
            <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="name">Naam :</label>
                <InputText id="name" class="form-control" @bind-Value="tournamentNewOrEdit.Name" />
                <ValidationMessage For="@(()=>tournamentNewOrEdit.Name)" />
                </div>

                @if(tournamentNewOrEdit.Surfers.Count >= 2)
                {
                    <button class="btn btn-outline-primary">Sla toernooi op</button>
                }
            </EditForm>
            @if(tournamentNewOrEdit.Surfers.Count> 0)
            {
                <WindSurferList WindSurfers="tournamentNewOrEdit.Surfers" ButtonText="deelt niet mee" TableTitle="windsurfers die deelnemen" UpdateSurfer="UpdateParticipant" />
            }
            <WindSurferList WindSurfers="notParticipatingSurfers" ButtonText="deelt mee" TableTitle="windsurfers die niet deelnemen" UpdateSurfer="UpdateParticipant" />
    }
    @if (isNewSurferRequested)
    {
        <WindSurferForm WindSurfer="@newSurfer" OnCancel="RefreshSurfers" OnSave="SaveSurfer" />
    }
}
@if (isReporting)
{
    if(selectedPhase == null)
    {
        <label>Surfer aan de beurt :</label>
        <select onchange="@((ChangeEventArgs args)=>UpdateSelectedCompetitor(args.Value.ToString()))">
            @foreach (var competitor in reportTournament.Competitors)
            {
                <option value="@competitor.Id">@competitor.Surfer.Name</option>
            }
        </select>
    }
    if (selectedCompetitor.Surfer != null)
    {
        <div>
            <label>Fase :</label>
            <select @bind="selectedPhase">
                @foreach (var phase in phases)
                {
                    <option value="@phase">@phase</option>
                }
            </select>

        </div>

    }

    @if (selectedPhase != null)
    {
        @if (selectedPhase == Constants.Start)
        {
            <EditForm Model="matchUpdate" OnValidSubmit="SubmitTournamentUpdate">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="start">Start van @selectedCompetitor.Surfer.Name routine :</label>
                    <InputText id="start" class="form-control" @bind-Value="matchUpdate.UpdateMessage" />
                    <ValidationMessage For="@(()=>matchUpdate.UpdateMessage)" />
                </div>
                <button class="btn btn-outline-primary">Stuur update door</button>
            </EditForm>
        }
    }
   
    
}

@code{
    #region setup
    private HubConnection hubConnection;
    private MatchUpdate matchUpdate = new();

    private bool isNewSurferRequested = false;

    private WindSurfer newSurfer = new();
    private Tournament tournamentNewOrEdit = new();
    private Tournament reportTournament = new();

    private List<WindSurfer> notParticipatingSurfers = new();
    private List<Tournament> tournaments;
    private List<string> phases;
    private string selectedPhase;
    private Competitor selectedCompetitor = new();
    private int selectedCompetitorId;

    private bool isEditingTournaments;
    private bool isReporting;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
                        .WithUrl(_navigationManager.ToAbsoluteUri(Constants.MatchHubUrl))
                        .Build();

        await hubConnection.StartAsync();
        notParticipatingSurfers = _surferService.GetAll();
        tournaments = _tournamentService.GetAll();
        await base.OnInitializedAsync();
    }

    #endregion



    #region Surfer
    private void RefreshSurfers()
    {
        isNewSurferRequested = false;
        notParticipatingSurfers = _surferService.GetAll();
        notParticipatingSurfers = notParticipatingSurfers.Except(tournamentNewOrEdit.Surfers).ToList();
        StateHasChanged();
    }

    private void SaveSurfer()
    {
        _surferService.AddSurfer(newSurfer);
        RefreshSurfers();
    }

    private void UpdateParticipant(WindSurfer windSurfer)
    {
        if (tournamentNewOrEdit.Surfers.Contains(windSurfer))
        {
            notParticipatingSurfers.Add(windSurfer);
            tournamentNewOrEdit.Surfers.Remove(windSurfer);
        }
        else{
            tournamentNewOrEdit.Surfers.Add(windSurfer);
            notParticipatingSurfers.Remove(windSurfer);
        }
        StateHasChanged();
    }

    private void RequestNewSurferForm()
    {
        isNewSurferRequested = true;
        newSurfer = new();
    }
    #endregion

    #region tournament
    private void RequestTournamentChanged()
    {
        isEditingTournaments = !isEditingTournaments;
        tournamentNewOrEdit = new();
        if (isEditingTournaments)
        {
            tournamentNewOrEdit.Surfers = new();
            RefreshSurfers();
        }
    }

    private Task<bool> OnTournamentSubmit()
    {
        if (tournamentNewOrEdit.Surfers.Count < 1)
        {
            return Task.FromResult(false);
        }
        return Task.FromResult(true);
    }


    private async Task AddNewTournament()
    {
        if (tournamentNewOrEdit.Id == 0)
        {
            _tournamentService.CreateTournament(tournamentNewOrEdit.Surfers, tournamentNewOrEdit.Name);
        }
        else
        {
            _tournamentService.UpdateTournament(tournamentNewOrEdit, tournamentNewOrEdit.Surfers, notParticipatingSurfers);
        }
        await hubConnection.SendAsync("NewTournament");
        isEditingTournaments = false;
        tournaments = _tournamentService.GetAll();
    }

    private void EditTournament(Tournament tournament)
    {
        tournamentNewOrEdit = tournament;
        isEditingTournaments = true;
        tournamentNewOrEdit.Surfers = tournamentNewOrEdit.Competitors.Select(d => d.Surfer).ToList();
    }
    #endregion

    private void StartReport(Tournament tournament)
    {
        reportTournament = tournament;
        isReporting = true;
    }

    private void UpdateSelectedCompetitor(string idString)
    {
        var id = int.Parse(idString);
        selectedCompetitor = reportTournament.Competitors.FirstOrDefault(c => c.Id == id);
        LoadPhasesStillToDo();
        if (phases.Contains(Constants.Start))
        {
            selectedPhase = Constants.Start;
            SubmitTournamentUpdate();
            LoadPhasesStillToDo();
        }
        StateHasChanged();
    }

    private void LoadPhasesStillToDo()
    {
        phases = new List<string>();
        phases.Add(Constants.Start);
        var toAdd = _tournamentService.GetPhasesInTournament();
        foreach (var add in toAdd)
        {
            phases.Add(add);
        }
        if(selectedCompetitor.PointsGained != null)
        {
            var phasesToRemove = new List<string>();
            foreach (var phase in phases)
            {
                if(selectedCompetitor.PointsGained.Select(c=>c.Phase).Contains(phase))
                {
                    phasesToRemove.Add(phase);
                }
            }
            foreach(var phase in phasesToRemove)
            {
                phases.Remove(phase);
            }
        }

    }

    private void SubmitTournamentUpdate()
    {
        if(selectedPhase == Constants.Start)
        {
            matchUpdate.UpdateMessage = $"De start van {selectedCompetitor.Surfer.Name} routine";
            matchUpdate.Phase = selectedPhase;
        }
        var updateHistoryModel = new UpdateHistoryModel()
        {
            Competitor = selectedCompetitor,
            PointGain = new PointGain
            {
                Phase = selectedPhase,
            },
            MatchUpdate = matchUpdate,

            TournamentToUpdateHistory = reportTournament
        };
        _matchService.AddUpdateToHistory(updateHistoryModel);
        SendUpdate(reportTournament.Id);
        selectedPhase = "";
    }

    #region hubMessage
    private async Task SendUpdate(int tournamentId)
    {
        await hubConnection.SendAsync("SendUpdate", tournamentId);
    }
    #endregion

}