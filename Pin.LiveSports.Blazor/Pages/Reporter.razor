@page "/reporter"

@inject NavigationManager _navigationManager;
@inject IWindSurferService _surferService;
@using Pin.LiveSports.Blazor.Components;  


@if (previousUpdate.UpdateMessage != null)
{
    <div>Vorige update : @previousUpdate.UpdateMessage</div>
}


@if(!isNewSurferRequested)
{

}
@if (isNewSurferRequested)
            {
                <WindSurferForm WindSurfer="@newSurfer" OnCancel="RefreshSurfers" OnSave="SaveSurfer"/>
            }




@code{
    private HubConnection hubConnection;
    private MatchUpdate matchUpdate = new();
    private MatchUpdate previousUpdate = new();

    private bool isNewSurferRequested = false;

    private WindSurfer newSurfer = new();
    private Tournament newTournament = new();

    private List<WindSurfer> participatingSurfers = new();
    private List<WindSurfer> notParticipatingSurfers = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
                        .WithUrl(_navigationManager.ToAbsoluteUri(Constants.MatchHubUrl))
                        .Build();

        await hubConnection.StartAsync();
        notParticipatingSurfers = _surferService.GetAll();
        await base.OnInitializedAsync();
    }

    private async Task SendUpdate()
    {
        matchUpdate.Time = DateTime.Now;
        await hubConnection.SendAsync("SendUpdate", matchUpdate);
        previousUpdate = matchUpdate;
        matchUpdate.UpdateMessage = string.Empty;
    }

    private void RefreshSurfers()
    {

    }

    private void SaveSurfer()
    {
        _surferService.AddSurfer(newSurfer);
    }
}