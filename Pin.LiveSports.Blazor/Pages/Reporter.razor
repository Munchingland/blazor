@page "/reporter"

@inject NavigationManager _navigationManager;
@inject IWindSurferService _surferService;
@inject ITournamentService _tournamentService;
@using Pin.LiveSports.Blazor.Components;
@using Pin.LiveSports.Core;


@if (previousUpdate.UpdateMessage != null)
{
    <div>Vorige update : @previousUpdate.UpdateMessage</div>
}
@if (!isEditingTournaments && !isReporting)
{
    <button class="btn btn-outline-primary" @onclick="()=>RequestTournamentChanged()">Voeg een nieuwe toernooi toe</button>
    @if(tournaments != null)
    {
        <TournamentList isReporter=true Tournaments="tournaments" OpenTournament="EditTournament"  StartReport="StartReport"/>
    }
}

@if (isEditingTournaments)
{
    @if (!isNewSurferRequested)
    {
            <button class="btn btn-outline-primary" @onclick="()=>RequestNewSurferForm()">Voeg nieuwe windsurfer toe</button>
            <button class="btn btn-outline-secondary" @onclick="()=>RequestTournamentChanged()">annuleer nieuw toernooi</button>
            <EditForm Model="tournamentNewOrEdit" OnValidSubmit="AddNewTournament">
            <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="name">Naam :</label>
                <InputText id="name" class="form-control" @bind-Value="tournamentNewOrEdit.Name" />
                <ValidationMessage For="@(()=>tournamentNewOrEdit.Name)" />
                </div>

                @if(participatingSurfers.Count >= 2)
                {
                    <button class="btn btn-outline-primary">Sla toernooi op</button>
                }
            </EditForm>
            @if(participatingSurfers.Count> 0)
            {
                <WindSurferList WindSurfers="participatingSurfers" ButtonText="deelt niet mee" TableTitle="windsurfers die deelnemen" UpdateSurfer="UpdateParticipant" />
            }
            <WindSurferList WindSurfers="notParticipatingSurfers" ButtonText="deelt mee" TableTitle="windsurfers die niet deelnemen" UpdateSurfer="UpdateParticipant" />
    }
    @if (isNewSurferRequested)
    {
        <WindSurferForm WindSurfer="@newSurfer" OnCancel="RefreshSurfers" OnSave="SaveSurfer" />
    }
}
@if (isReporting)
{
    
}

@code{
    #region setup
    private HubConnection hubConnection;
    private MatchUpdate matchUpdate = new();
    private MatchUpdate previousUpdate = new();

    private bool isNewSurferRequested = false;

    private WindSurfer newSurfer = new();
    private Tournament tournamentNewOrEdit = new();
    private Tournament reportTournament = new();

    private List<WindSurfer> participatingSurfers = new();
    private List<WindSurfer> notParticipatingSurfers = new();
    private List<Tournament> tournaments;

    private bool isEditingTournaments;
    private bool isReporting;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
                        .WithUrl(_navigationManager.ToAbsoluteUri(Constants.MatchHubUrl))
                        .Build();

        await hubConnection.StartAsync();
        notParticipatingSurfers = _surferService.GetAll();
        tournaments = _tournamentService.GetAll();
        await base.OnInitializedAsync();
    }
    #endregion

    #region hubMessage
    private async Task SendUpdate()
    {
        matchUpdate.Time = DateTime.Now;
        await hubConnection.SendAsync("SendUpdate", matchUpdate);
        previousUpdate = matchUpdate;
        matchUpdate.UpdateMessage = string.Empty;
    }
    #endregion

    #region Surfer
    private void RefreshSurfers()
    {
        isNewSurferRequested = false;
        notParticipatingSurfers = _surferService.GetAll();
        notParticipatingSurfers = notParticipatingSurfers.Except(participatingSurfers).ToList();
        StateHasChanged();
    }

    private void SaveSurfer()
    {
        _surferService.AddSurfer(newSurfer);
        RefreshSurfers();
    }

    private void UpdateParticipant(WindSurfer windSurfer)
    {
        if (participatingSurfers.Contains(windSurfer))
        {
            notParticipatingSurfers.Add(windSurfer);
            participatingSurfers.Remove(windSurfer);
        }
        else{
            participatingSurfers.Add(windSurfer);
            notParticipatingSurfers.Remove(windSurfer);
        }
        StateHasChanged();
    }

    private void RequestNewSurferForm()
    {
        isNewSurferRequested = true;
        newSurfer = new();
    }
    #endregion

    #region tournament
    private void RequestTournamentChanged()
    {
        isEditingTournaments = !isEditingTournaments;
        tournamentNewOrEdit = new();
        if (isEditingTournaments)
        {
            participatingSurfers = new();
            RefreshSurfers();
        }
    }
    private async Task AddNewTournament()
    {
        if (tournamentNewOrEdit.Id == 0)
        {
            _tournamentService.CreateTournament(participatingSurfers, tournamentNewOrEdit.Name);
        }
        else
        {
            _tournamentService.UpdateTournament(tournamentNewOrEdit, participatingSurfers, notParticipatingSurfers);
        }
        await hubConnection.SendAsync("NewTournament");
        isEditingTournaments = false;
        tournaments = _tournamentService.GetAll();
    }

    private void EditTournament(Tournament tournament)
    {
        tournamentNewOrEdit = tournament;
        isEditingTournaments = true;
        participatingSurfers = tournamentNewOrEdit.Competitors.Select(d => d.Surfer).ToList();
    }
    #endregion

    private void StartReport(Tournament tournament)
    {
        reportTournament = tournament;
        isReporting = true;
    }


}