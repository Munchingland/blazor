@page "/reporter"

@inject NavigationManager _navigationManager;
@inject IWindSurferService _surferService;
@using Pin.LiveSports.Blazor.Components;


@if (previousUpdate.UpdateMessage != null)
{
    <div>Vorige update : @previousUpdate.UpdateMessage</div>
}
@if(!isAddingNewTournament && !isReporting)
{
    
}

@if (!isAddingNewTournament)
{
    @if (!isNewSurferRequested)
    {
        <button class="btn btn-outline-primary" @onclick="()=>RequestnewSurferForm()">Voeg nieuwe windsurfer toe</button>
        <WindSurferList WindSurfers="notParticipatingSurfers" ButtonText="deelt mee" TableTitle="windsurfers die niet deelnemen" UpdateSurfer="UpdateParticipant"/>

        <WindSurferList WindSurfers="participatingSurfers" ButtonText="deelt niet mee" TableTitle="windsurfers die deelnemen" UpdateSurfer="UpdateParticipant"/>
    }
}


@if (isNewSurferRequested)
{
    <WindSurferForm WindSurfer="@newSurfer" OnCancel="RefreshSurfers" OnSave="SaveSurfer" />
}




@code{
    private HubConnection hubConnection;
    private MatchUpdate matchUpdate = new();
    private MatchUpdate previousUpdate = new();

    private bool isNewSurferRequested = false;

    private WindSurfer newSurfer = new();
    private Tournament newTournament = new();

    private List<WindSurfer> participatingSurfers = new();
    private List<WindSurfer> notParticipatingSurfers = new();

    private bool isAddingNewTournament;
    private bool isReporting;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
                        .WithUrl(_navigationManager.ToAbsoluteUri(Constants.MatchHubUrl))
                        .Build();

        await hubConnection.StartAsync();
        notParticipatingSurfers = _surferService.GetAll();
        await base.OnInitializedAsync();
    }

    private async Task SendUpdate()
    {
        matchUpdate.Time = DateTime.Now;
        await hubConnection.SendAsync("SendUpdate", matchUpdate);
        previousUpdate = matchUpdate;
        matchUpdate.UpdateMessage = string.Empty;
    }

    private void RefreshSurfers()
    {
        isNewSurferRequested = false;
        notParticipatingSurfers = _surferService.GetAll();
        notParticipatingSurfers = notParticipatingSurfers.Except(participatingSurfers).ToList();
        StateHasChanged();
    }

    private void SaveSurfer()
    {
        _surferService.AddSurfer(newSurfer);
        RefreshSurfers();
    }

    private void UpdateParticipant(WindSurfer windSurfer)
    {
        if (participatingSurfers.Contains(windSurfer))
        {
            notParticipatingSurfers.Add(windSurfer);
            participatingSurfers.Remove(windSurfer);
        }
        else{
            participatingSurfers.Add(windSurfer);
            notParticipatingSurfers.Remove(windSurfer);
        }
        StateHasChanged();
    }

    private void RequestnewSurferForm()
    {
        isNewSurferRequested = true;
        newSurfer = new();
    }
}